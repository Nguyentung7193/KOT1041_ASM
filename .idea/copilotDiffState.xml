<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/model/order/OrderModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/model/order/OrderModel.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.model.order&#10;&#10;data class OrderProductModel(&#10;    val _id: String,&#10;    val name: String,&#10;    val type: String,&#10;    val price: Int,&#10;    val description: String?,&#10;    val createdAt: String?,&#10;    val updatedAt: String?&#10;)&#10;data class OrderItemModel(&#10;    val product: OrderProductModel,&#10;    val quantity: Int,&#10;    val _id: String&#10;)&#10;&#10;data class OrderModel(&#10;    val _id: String,&#10;    val userID: String,&#10;    val fullname: String,&#10;    val address: String,&#10;    val phone: String,&#10;    val totalPrice: Int,&#10;    val note: String?,&#10;    val type: String,&#10;    val items: List&lt;OrderItemModel&gt;,&#10;    val createdAt: String,&#10;    val updatedAt: String&#10;)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.model.order&#10;&#10;// Model cho danh sách đơn hàng&#10;&#10;data class OrderListItemModel(&#10;    val product: String,&#10;    val quantity: Int,&#10;    val _id: String&#10;)&#10;&#10;data class OrderListModel(&#10;    val _id: String,&#10;    val userID: String,&#10;    val fullname: String,&#10;    val address: String,&#10;    val phone: String,&#10;    val totalPrice: Int,&#10;    val note: String?,&#10;    val type: String,&#10;    val items: List&lt;OrderListItemModel&gt;,&#10;    val createdAt: String,&#10;    val updatedAt: String&#10;)&#10;&#10;// Model cho chi tiết đơn hàng&#10;&#10;data class OrderProductModel(&#10;    val _id: String,&#10;    val name: String,&#10;    val type: String,&#10;    val price: Int,&#10;    val description: String?,&#10;    val createdAt: String?,&#10;    val updatedAt: String?&#10;)&#10;&#10;data class OrderDetailItemModel(&#10;    val product: OrderProductModel,&#10;    val quantity: Int,&#10;    val _id: String&#10;)&#10;&#10;data class OrderDetailModel(&#10;    val _id: String,&#10;    val userID: String,&#10;    val fullname: String,&#10;    val address: String,&#10;    val phone: String,&#10;    val totalPrice: Int,&#10;    val note: String?,&#10;    val type: String,&#10;    val items: List&lt;OrderDetailItemModel&gt;,&#10;    val createdAt: String,&#10;    val updatedAt: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/navigation/AppNavHost.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/navigation/AppNavHost.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.navigation&#10;&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;import com.example.kot1041_asm.src.ui.auth.login.LoginScreen&#10;import com.example.kot1041_asm.src.ui.auth.signup.RegisterScreen&#10;import com.example.kot1041_asm.src.ui.cart.CartScreen&#10;import com.example.kot1041_asm.src.ui.home.HomeScreen&#10;import com.example.kot1041_asm.src.ui.product.ProductDetailScreen&#10;import com.example.kot1041_asm.src.ui.profile.ProfileScreen&#10;//import com.example.kot1041_asm.src.ui.cart.CartScreen&#10;//import com.example.kot1041_asm.src.ui.home.HomeScreen&#10;//import com.example.kot1041_asm.src.ui.order.OrderDetailScreen&#10;//import com.example.kot1041_asm.src.ui.order.OrderHistoryScreen&#10;//import com.example.kot1041_asm.src.ui.product.ProductDetailScreen&#10;//import com.example.kot1041_asm.src.ui.product_list.ProductListScreen&#10;//import com.example.kot1041_asm.src.ui.profile.ProfileScreen&#10;import com.example.kot1041_asm.src.ui.splash.WelcomeScreen&#10;import com.example.kot1041_asm.src.viewmodle.cart.CartViewModel&#10;import kotlinx.coroutines.runBlocking&#10;&#10;&#10;@Composable&#10;fun AppNavHost(navController: NavHostController) {&#10;    NavHost(navController = navController, startDestination = &quot;welcome&quot;) {&#10;        composable(&quot;welcome&quot;) {&#10;            WelcomeScreen(navController)&#10;        }&#10;        composable(&quot;login&quot;) {&#10;           LoginScreen(navController)&#10;        }&#10;        composable(&quot;register&quot;) {&#10;            RegisterScreen(navController)&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            val context = LocalContext.current&#10;            val tokenManager = TokenManager(context)&#10;&#10;            // Nếu token lấy từ DataStore&#10;            val token by tokenManager.token.collectAsState(initial = &quot;&quot;)&#10;&#10;            HomeScreen(&#10;                navController = navController,&#10;                tokenManager = tokenManager&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;product_detail/{productId}&quot;,&#10;            arguments = listOf(navArgument(&quot;productId&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val productId = backStackEntry.arguments?.getString(&quot;productId&quot;) ?: &quot;&quot;&#10;            val context = LocalContext.current&#10;            val tokenManager = TokenManager(context)&#10;            ProductDetailScreen(&#10;                productId = productId,&#10;                onBack = { navController.popBackStack() },&#10;                tokenManager = tokenManager&#10;            )&#10;        }&#10;        composable(&quot;cart&quot;) {&#10;            val context = LocalContext.current&#10;            val tokenManager = TokenManager(context)&#10;            val cartViewModel = androidx.lifecycle.viewmodel.compose.viewModel&lt;com.example.kot1041_asm.src.viewmodle.cart.CartViewModel&gt;()&#10;            val token = kotlinx.coroutines.runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;            CartScreen(&#10;                navController = navController,&#10;                cartViewModel = cartViewModel,&#10;                onBack = { navController.popBackStack() },&#10;                onIncrease = { cartItem -&gt;&#10;                    val productId = cartItem.product?.id ?: return@CartScreen&#10;                    val newQuantity = cartItem.quantity + 1&#10;                    cartViewModel.updateCartItem(token, productId, newQuantity)&#10;                    cartViewModel.loadCart(token)&#10;                },&#10;                onDecrease = { cartItem -&gt;&#10;                    val productId = cartItem.product?.id ?: return@CartScreen&#10;                    val newQuantity = if (cartItem.quantity &gt; 1) cartItem.quantity - 1 else 1&#10;                    cartViewModel.updateCartItem(token, productId, newQuantity)&#10;                    cartViewModel.loadCart(token)&#10;                },&#10;                onRemove = { cartItem -&gt;&#10;                    val productId = cartItem.product?.id ?: return@CartScreen&#10;                    cartViewModel.updateCartItem(token, productId, 0)&#10;                    cartViewModel.loadCart(token)&#10;                },&#10;                tokenManager = tokenManager&#10;            )&#10;        }&#10;        composable(&quot;order_history&quot;) {&#10;            com.example.kot1041_asm.src.ui.order.OrderHistoryScreen(&#10;                onBack = { navController.popBackStack() },&#10;                onOrderClick = { order -&gt;&#10;                    // TODO: Xử lý khi click vào đơn hàng, ví dụ chuyển sang màn chi tiết đơn hàng&#10;                }&#10;            )&#10;        }&#10;&#10;//        composable(&quot;home&quot;) {&#10;//             HomeScreen(navController)&#10;//        }&#10;//        composable(&quot;product_detail/{productName}&quot;) { backStackEntry -&gt;&#10;//            val productName = backStackEntry.arguments?.getString(&quot;productName&quot;)&#10;//            val product = FakeData.products.find { it.name == productName }&#10;//            if (product != null) {&#10;//                ProductDetailScreen(&#10;//                    product = product,&#10;//                    onBack = { navController.popBackStack() },&#10;//                    onAddToCart = { prod, quantity -&gt;&#10;//                        // xử lý thêm vào giỏ&#10;//                    }&#10;//                )&#10;//            }&#10;//        }&#10;//        composable(&quot;cart&quot;) {&#10;//            val cartItems = remember {&#10;//                mutableStateListOf&lt;CartItem&gt;().apply {&#10;//                    addAll(fakeCartItems) // tạo một mutable list từ danh sách giả lập&#10;//                }&#10;//            }&#10;//            CartScreen(&#10;//                navController = navController,&#10;//                cartItems = cartItems,&#10;//                onBack = { navController.popBackStack() },&#10;//                onIncrease = { it.quantity++ },&#10;//                onDecrease = { if (it.quantity &gt; 1) it.quantity-- },&#10;//                onRemove = { cartItems.remove(it) },&#10;//            )&#10;//        }&#10;        composable(&quot;profile&quot;) {&#10;            ProfileScreen(&#10;                onEditProfile = { /* TODO */ },&#10;                onViewHistory = { navController.navigate(&quot;order_history&quot;) },&#10;                onLogout = { navController.navigate(&quot;login&quot;) { popUpTo(&quot;welcome&quot;) { inclusive = true } } }&#10;            )&#10;        }&#10;//        composable(&quot;order_history&quot;) {&#10;//            OrderHistoryScreen(&#10;//                onBack = { navController.popBackStack() },&#10;//                onOrderClick = { order -&gt;&#10;//                    navController.navigate(&quot;order_detail/${order.id}&quot;)&#10;//                }&#10;//            )&#10;//        }&#10;//        composable(&#10;//            route = &quot;order_detail/{orderId}&quot;,&#10;//            arguments = listOf(navArgument(&quot;orderId&quot;) { type = NavType.StringType })&#10;//        ) { backStackEntry -&gt;&#10;//            val orderId = backStackEntry.arguments?.getString(&quot;orderId&quot;)&#10;//            val order = fakeOrderHistory.find { it.id == orderId }&#10;//&#10;//            if (order != null) {&#10;//                OrderDetailScreen(&#10;//                    order = order,&#10;//                    onBack = { navController.popBackStack() }&#10;//                )&#10;//            } else {&#10;//                Text(&quot;Đơn hàng không tồn tại.&quot;)&#10;//            }&#10;//        }&#10;//        composable(route = &quot;product_list&quot;) {&#10;//            ProductListScreen(&#10;//                navController = navController,&#10;//                onBack = { navController.popBackStack() },&#10;//                onCartClick = { navController.navigate(&quot;cart&quot;) }&#10;//            ) // Sử dụng HomeScreen để hiển thị danh sách sản phẩm&#10;//        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.navigation&#10;&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;import com.example.kot1041_asm.src.ui.auth.login.LoginScreen&#10;import com.example.kot1041_asm.src.ui.auth.signup.RegisterScreen&#10;import com.example.kot1041_asm.src.ui.cart.CartScreen&#10;import com.example.kot1041_asm.src.ui.home.HomeScreen&#10;import com.example.kot1041_asm.src.ui.product.ProductDetailScreen&#10;import com.example.kot1041_asm.src.ui.profile.ProfileScreen&#10;//import com.example.kot1041_asm.src.ui.cart.CartScreen&#10;//import com.example.kot1041_asm.src.ui.home.HomeScreen&#10;//import com.example.kot1041_asm.src.ui.order.OrderDetailScreen&#10;//import com.example.kot1041_asm.src.ui.order.OrderHistoryScreen&#10;//import com.example.kot1041_asm.src.ui.product.ProductDetailScreen&#10;//import com.example.kot1041_asm.src.ui.product_list.ProductListScreen&#10;//import com.example.kot1041_asm.src.ui.profile.ProfileScreen&#10;import com.example.kot1041_asm.src.ui.splash.WelcomeScreen&#10;import com.example.kot1041_asm.src.viewmodle.cart.CartViewModel&#10;import kotlinx.coroutines.runBlocking&#10;&#10;&#10;@Composable&#10;fun AppNavHost(navController: NavHostController) {&#10;    NavHost(navController = navController, startDestination = &quot;welcome&quot;) {&#10;        composable(&quot;welcome&quot;) {&#10;            WelcomeScreen(navController)&#10;        }&#10;        composable(&quot;login&quot;) {&#10;           LoginScreen(navController)&#10;        }&#10;        composable(&quot;register&quot;) {&#10;            RegisterScreen(navController)&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            val context = LocalContext.current&#10;            val tokenManager = TokenManager(context)&#10;&#10;            // Nếu token lấy từ DataStore&#10;            val token by tokenManager.token.collectAsState(initial = &quot;&quot;)&#10;&#10;            HomeScreen(&#10;                navController = navController,&#10;                tokenManager = tokenManager&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;product_detail/{productId}&quot;,&#10;            arguments = listOf(navArgument(&quot;productId&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val productId = backStackEntry.arguments?.getString(&quot;productId&quot;) ?: &quot;&quot;&#10;            val context = LocalContext.current&#10;            val tokenManager = TokenManager(context)&#10;            ProductDetailScreen(&#10;                productId = productId,&#10;                onBack = { navController.popBackStack() },&#10;                tokenManager = tokenManager&#10;            )&#10;        }&#10;        composable(&quot;cart&quot;) {&#10;            val context = LocalContext.current&#10;            val tokenManager = TokenManager(context)&#10;            val cartViewModel = androidx.lifecycle.viewmodel.compose.viewModel&lt;com.example.kot1041_asm.src.viewmodle.cart.CartViewModel&gt;()&#10;            val token = kotlinx.coroutines.runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;            CartScreen(&#10;                navController = navController,&#10;                cartViewModel = cartViewModel,&#10;                onBack = { navController.popBackStack() },&#10;                onIncrease = { cartItem -&gt;&#10;                    val productId = cartItem.product?.id ?: return@CartScreen&#10;                    val newQuantity = cartItem.quantity + 1&#10;                    cartViewModel.updateCartItem(token, productId, newQuantity)&#10;                    cartViewModel.loadCart(token)&#10;                },&#10;                onDecrease = { cartItem -&gt;&#10;                    val productId = cartItem.product?.id ?: return@CartScreen&#10;                    val newQuantity = if (cartItem.quantity &gt; 1) cartItem.quantity - 1 else 1&#10;                    cartViewModel.updateCartItem(token, productId, newQuantity)&#10;                    cartViewModel.loadCart(token)&#10;                },&#10;                onRemove = { cartItem -&gt;&#10;                    val productId = cartItem.product?.id ?: return@CartScreen&#10;                    cartViewModel.updateCartItem(token, productId, 0)&#10;                    cartViewModel.loadCart(token)&#10;                },&#10;                tokenManager = tokenManager&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;order_detail/{orderId}&quot;,&#10;            arguments = listOf(navArgument(&quot;orderId&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val orderId = backStackEntry.arguments?.getString(&quot;orderId&quot;) ?: &quot;&quot;&#10;            com.example.kot1041_asm.src.ui.order.OrderDetailScreen(&#10;                orderId = orderId,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;        composable(&quot;order_history&quot;) {&#10;            com.example.kot1041_asm.src.ui.order.OrderHistoryScreen(&#10;                onBack = { navController.popBackStack() },&#10;                onOrderClick = { order -&gt;&#10;                    navController.navigate(&quot;order_detail/${order._id}&quot;)&#10;                }&#10;            )&#10;        }&#10;//        composable(&quot;home&quot;) {&#10;//             HomeScreen(navController)&#10;//        }&#10;//        composable(&quot;product_detail/{productName}&quot;) { backStackEntry -&gt;&#10;//            val productName = backStackEntry.arguments?.getString(&quot;productName&quot;)&#10;//            val product = FakeData.products.find { it.name == productName }&#10;//            if (product != null) {&#10;//                ProductDetailScreen(&#10;//                    product = product,&#10;//                    onBack = { navController.popBackStack() },&#10;//                    onAddToCart = { prod, quantity -&gt;&#10;//                        // xử lý thêm vào giỏ&#10;//                    }&#10;//                )&#10;//            }&#10;//        }&#10;//        composable(&quot;cart&quot;) {&#10;//            val cartItems = remember {&#10;//                mutableStateListOf&lt;CartItem&gt;().apply {&#10;//                    addAll(fakeCartItems) // tạo một mutable list từ danh sách giả lập&#10;//                }&#10;//            }&#10;//            CartScreen(&#10;//                navController = navController,&#10;//                cartItems = cartItems,&#10;//                onBack = { navController.popBackStack() },&#10;//                onIncrease = { it.quantity++ },&#10;//                onDecrease = { if (it.quantity &gt; 1) it.quantity-- },&#10;//                onRemove = { cartItems.remove(it) },&#10;//            )&#10;//        }&#10;        composable(&quot;profile&quot;) {&#10;            ProfileScreen(&#10;                onEditProfile = { /* TODO */ },&#10;                onViewHistory = { navController.navigate(&quot;order_history&quot;) },&#10;                onLogout = { navController.navigate(&quot;login&quot;) { popUpTo(&quot;welcome&quot;) { inclusive = true } } }&#10;            )&#10;        }&#10;//        composable(&quot;order_history&quot;) {&#10;//            OrderHistoryScreen(&#10;//                onBack = { navController.popBackStack() },&#10;//                onOrderClick = { order -&gt;&#10;//                    navController.navigate(&quot;order_detail/${order.id}&quot;)&#10;//                }&#10;//            )&#10;//        }&#10;//        composable(&#10;//            route = &quot;order_detail/{orderId}&quot;,&#10;//            arguments = listOf(navArgument(&quot;orderId&quot;) { type = NavType.StringType })&#10;//        ) { backStackEntry -&gt;&#10;//            val orderId = backStackEntry.arguments?.getString(&quot;orderId&quot;)&#10;//            val order = fakeOrderHistory.find { it.id == orderId }&#10;//&#10;//            if (order != null) {&#10;//                OrderDetailScreen(&#10;//                    order = order,&#10;//                    onBack = { navController.popBackStack() }&#10;//                )&#10;//            } else {&#10;//                Text(&quot;Đơn hàng không tồn tại.&quot;)&#10;//            }&#10;//        }&#10;//        composable(route = &quot;product_list&quot;) {&#10;//            ProductListScreen(&#10;//                navController = navController,&#10;//                onBack = { navController.popBackStack() },&#10;//                onCartClick = { navController.navigate(&quot;cart&quot;) }&#10;//            ) // Sử dụng HomeScreen để hiển thị danh sách sản phẩm&#10;//        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/repository/cart/CartRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/repository/cart/CartRepository.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.repository.cart&#10;&#10;import com.example.kot1041_asm.src.model.cart.CartResponse&#10;import com.example.kot1041_asm.src.model.cart.CartResponseCart&#10;import com.example.kot1041_asm.src.services.cart.CartService&#10;import retrofit2.Response&#10;&#10;class CartRepository(private val cartService: CartService) {&#10;&#10;    suspend fun getCart(token: String): Response&lt;CartResponseCart&gt; {&#10;        val authHeader = &quot;Bearer $token&quot;&#10;        return cartService.getCart(authHeader)&#10;    }&#10;    suspend fun updateCartItem(token: String, productId: String, quantity: Int): Result&lt;CartResponseCart&gt; {&#10;        return try {&#10;            val response = cartService.updateCart(productId, quantity, &quot;Bearer $token&quot;)&#10;            if (response.isSuccessful) {&#10;                response.body()?.let {&#10;                    Result.success(it)&#10;                } ?: Result.failure(Exception(&quot;Empty response body&quot;))&#10;            } else {&#10;                Result.failure(Exception(&quot;Error code: ${response.code()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.repository.cart&#10;&#10;import com.example.kot1041_asm.src.model.cart.CartResponse&#10;import com.example.kot1041_asm.src.model.cart.CartResponseCart&#10;import com.example.kot1041_asm.src.services.cart.CartService&#10;import retrofit2.Response&#10;&#10;class CartRepository(private val cartService: CartService) {&#10;&#10;    suspend fun getCart(token: String): Response&lt;CartResponseCart&gt; {&#10;        val authHeader = &quot;Bearer $token&quot;&#10;        return cartService.getCart(authHeader)&#10;    }&#10;    suspend fun updateCartItem(token: String, productId: String, quantity: Int): Result&lt;CartResponseCart&gt; {&#10;        return try {&#10;            val response = cartService.updateCart(productId, quantity, &quot;Bearer $token&quot;)&#10;            if (response.isSuccessful) {&#10;                response.body()?.let {&#10;                    Result.success(it)&#10;                } ?: Result.failure(Exception(&quot;Empty response body&quot;))&#10;            } else {&#10;                Result.failure(Exception(&quot;Error code: ${response.code()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;    suspend fun checkoutOrder(token: String, body: Map&lt;String, String&gt;): Result&lt;Any&gt; {&#10;        return try {&#10;            val response = cartService.checkoutOrder(&quot;Bearer $token&quot;, body)&#10;            if (response.isSuccessful) {&#10;                Result.success(response.body() ?: &quot;Success&quot;)&#10;            } else {&#10;                Result.failure(Exception(&quot;Error code: ${response.code()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/repository/order/OrderRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/repository/order/OrderRepository.java" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.repository.order;&#10;&#10;import com.example.kot1041_asm.src.model.order.OrderModel;&#10;import com.example.kot1041_asm.src.services.order.OrderService;&#10;import java.util.List;&#10;&#10;public class OrderRepository {&#10;    private final OrderService orderService;&#10;&#10;    public OrderRepository(OrderService orderService) {&#10;        this.orderService = orderService;&#10;    }&#10;&#10;    public List&lt;OrderModel&gt; getAllOrders(String token) throws Exception {&#10;&#10;        return orderService.getAllOrders(&quot;Bearer &quot; + token);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.repository.order&#10;&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.services.order.OrderService&#10;&#10;class OrderRepository(private val orderService: OrderService) {&#10;    suspend fun getAllOrders(token: String): Result&lt;List&lt;OrderModel&gt;&gt; {&#10;        return try {&#10;            val orders = orderService.getAllOrders(&quot;Bearer $token&quot;)&#10;            Result.success(orders)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/repository/order/OrderRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/repository/order/OrderRepository.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.repository.order&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.services.order.OrderService&#10;import retrofit2.Response&#10;&#10;class OrderRepository(private val orderService: OrderService) {&#10;    suspend fun getAllOrders(token: String): Result&lt;List&lt;OrderModel&gt;&gt; {&#10;        val authHeader = &quot;Bearer $token&quot;&#10;        return try {&#10;            val response = orderService.getAllOrders(authHeader)&#10;            if (response.isSuccessful) {&#10;                Result.success(response.body() ?: emptyList())&#10;            } else {&#10;                Result.failure(Exception(&quot;Error code: ${response.code()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun getOrderDetail(token: String, orderId: String): Result&lt;OrderModel&gt; {&#10;        val authHeader = &quot;Bearer $token&quot;&#10;        return try {&#10;            val response = orderService.getOrderDetail(authHeader, orderId)&#10;            if (response.isSuccessful) {&#10;                response.body()?.let { Result.success(it) } ?: Result.failure(Exception(&quot;Empty body&quot;))&#10;            } else {&#10;                Result.failure(Exception(&quot;Error code: ${response.code()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.repository.order&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.model.order.OrderListModel&#10;import com.example.kot1041_asm.src.model.order.OrderDetailModel&#10;import com.example.kot1041_asm.src.services.order.OrderService&#10;import retrofit2.Response&#10;&#10;class OrderRepository(private val orderService: OrderService) {&#10;    suspend fun getAllOrders(token: String): Result&lt;List&lt;OrderListModel&gt;&gt; {&#10;        val authHeader = &quot;Bearer $token&quot;&#10;        return try {&#10;            val response = orderService.getAllOrders(authHeader)&#10;            if (response.isSuccessful) {&#10;                Result.success(response.body() ?: emptyList())&#10;            } else {&#10;                Result.failure(Exception(&quot;Error code: ${response.code()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun getOrderDetail(token: String, orderId: String): Result&lt;OrderDetailModel&gt; {&#10;        val authHeader = &quot;Bearer $token&quot;&#10;        return try {&#10;            val response = orderService.getOrderDetail(authHeader, orderId)&#10;            if (response.isSuccessful) {&#10;                response.body()?.let { Result.success(it) } ?: Result.failure(Exception(&quot;Empty body&quot;))&#10;            } else {&#10;                Result.failure(Exception(&quot;Error code: ${response.code()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/services/cart/CartService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/services/cart/CartService.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.services.cart&#10;&#10;import com.example.kot1041_asm.src.model.cart.CartResponse&#10;import com.example.kot1041_asm.src.model.cart.CartResponseCart&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Header&#10;import retrofit2.http.PUT&#10;import retrofit2.http.Query&#10;&#10;interface CartService {&#10;&#10;&#10;    @GET(&quot;/api/cart&quot;)&#10;    suspend fun getCart(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;CartResponseCart&gt;&#10;&#10;        @PUT(&quot;/api/cart/update&quot;)&#10;        suspend fun updateCart(&#10;            @Query(&quot;productId&quot;) productId: String,&#10;            @Query(&quot;quantity&quot;) quantity: Int,&#10;            @Header(&quot;Authorization&quot;) authHeader: String&#10;        ): Response&lt;CartResponseCart&gt;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.services.cart&#10;&#10;import com.example.kot1041_asm.src.model.cart.CartResponse&#10;import com.example.kot1041_asm.src.model.cart.CartResponseCart&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Header&#10;import retrofit2.http.PUT&#10;import retrofit2.http.POST&#10;import retrofit2.http.Query&#10;&#10;interface CartService {&#10;&#10;&#10;    @GET(&quot;/api/cart&quot;)&#10;    suspend fun getCart(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;CartResponseCart&gt;&#10;&#10;    @PUT(&quot;/api/cart/update&quot;)&#10;    suspend fun updateCart(&#10;        @Query(&quot;productId&quot;) productId: String,&#10;        @Query(&quot;quantity&quot;) quantity: Int,&#10;        @Header(&quot;Authorization&quot;) authHeader: String&#10;    ): Response&lt;CartResponseCart&gt;&#10;&#10;    @POST(&quot;/api/orders/checkout&quot;)&#10;    suspend fun checkoutOrder(&#10;        @Header(&quot;Authorization&quot;) authHeader: String,&#10;        @retrofit2.http.Body body: Map&lt;String, String&gt;&#10;    ): retrofit2.Response&lt;Any&gt;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/services/order/OrderService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/services/order/OrderService.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.services.order&#10;&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Header&#10;import retrofit2.http.Path&#10;&#10;interface OrderService {&#10;    @GET(&quot;/api/orders/order&quot;)&#10;    suspend fun getAllOrders(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;List&lt;OrderModel&gt;&gt;&#10;&#10;    @GET(&quot;/api/orders/order/{orderId}&quot;)&#10;    suspend fun getOrderDetail(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;orderId&quot;) orderId: String&#10;    ): Response&lt;OrderModel&gt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.services.order&#10;&#10;import com.example.kot1041_asm.src.model.order.OrderListModel&#10;import com.example.kot1041_asm.src.model.order.OrderDetailModel&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Header&#10;import retrofit2.http.Path&#10;&#10;interface OrderService {&#10;    @GET(&quot;/api/orders/order&quot;)&#10;    suspend fun getAllOrders(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;List&lt;OrderListModel&gt;&gt;&#10;&#10;    @GET(&quot;/api/orders/order/{orderId}&quot;)&#10;    suspend fun getOrderDetail(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;orderId&quot;) orderId: String&#10;    ): Response&lt;OrderDetailModel&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/ui/cart/CartScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/ui/cart/CartScreen.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.ui.cart&#10;&#10;import CartItemComposable&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavHostController&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;import com.example.kot1041_asm.src.model.cart.CartItem&#10;import com.example.kot1041_asm.src.viewmodle.cart.CartViewModel&#10;import kotlinx.coroutines.flow.firstOrNull&#10;import kotlinx.coroutines.runBlocking&#10;&#10;@Composable&#10;fun CartScreen(&#10;    navController: NavHostController,&#10;    cartViewModel: CartViewModel = viewModel(),&#10;    onBack: () -&gt; Unit,&#10;    onIncrease: (CartItem) -&gt; Unit,&#10;    onDecrease: (CartItem) -&gt; Unit,&#10;    onRemove: (CartItem) -&gt; Unit,&#10;    tokenManager: TokenManager&#10;) {&#10;    // Load giỏ hàng khi màn hình khởi tạo&#10;    val token = runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;    LaunchedEffect(Unit) {&#10;        cartViewModel.loadCart(token)&#10;    }&#10;&#10;    // Lấy trạng thái hiện tại từ ViewModel&#10;    val state by cartViewModel.state.collectAsState()&#10;&#10;    val cartItems = state.cartData?.items ?: emptyList()&#10;&#10;    val total = cartItems.sumOf { it.product?.price ?: 0 * it.quantity }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF121212))&#10;            .padding(16.dp),&#10;    ) {&#10;        // Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBack) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = Color.White)&#10;            }&#10;            Text(&#10;                text = &quot;Giỏ hàng&quot;,&#10;                fontSize = 22.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFFD1AFFF)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (state.isLoading) {&#10;            // Hiện loading nếu cần&#10;            CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally), color = Color(0xFFBA68C8))&#10;        } else if (state.error != null) {&#10;            Text(&#10;                text = state.error ?: &quot;Lỗi không xác định&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;        } else if (cartItems.isEmpty()) {&#10;            Text(&#10;                text = &quot;Giỏ hàng trống&quot;,&#10;                color = Color.LightGray,&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;        } else {&#10;            // List giỏ hàng&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(cartItems) { item -&gt;&#10;                    CartItemComposable(&#10;                        cartItem = item,&#10;                        onIncrease = { onIncrease(item) },&#10;                        onDecrease = { onDecrease(item) },&#10;                        onRemove = { onRemove(item) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Tổng tiền + Checkout&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Tổng: $total đ&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Button(&#10;                    onClick = {&#10;                        // Xử lý thanh toán&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBA68C8)),&#10;                    modifier = Modifier&#10;                        .height(48.dp)&#10;                        .width(160.dp)&#10;                ) {&#10;                    Text(text = &quot;Thanh toán&quot;, color = Color.White)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.ui.cart&#10;&#10;import CartItemComposable&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavHostController&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;import com.example.kot1041_asm.src.model.cart.CartItem&#10;import com.example.kot1041_asm.src.viewmodle.cart.CartViewModel&#10;import kotlinx.coroutines.flow.firstOrNull&#10;import kotlinx.coroutines.runBlocking&#10;&#10;@Composable&#10;fun CartScreen(&#10;    navController: NavHostController,&#10;    cartViewModel: CartViewModel = viewModel(),&#10;    onBack: () -&gt; Unit,&#10;    onIncrease: (CartItem) -&gt; Unit,&#10;    onDecrease: (CartItem) -&gt; Unit,&#10;    onRemove: (CartItem) -&gt; Unit,&#10;    tokenManager: TokenManager&#10;) {&#10;    // Load giỏ hàng khi màn hình khởi tạo&#10;    val token = runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;    LaunchedEffect(Unit) {&#10;        cartViewModel.loadCart(token)&#10;    }&#10;&#10;    // Lấy trạng thái hiện tại từ ViewModel&#10;    val state by cartViewModel.state.collectAsState()&#10;&#10;    val cartItems = state.cartData?.items ?: emptyList()&#10;&#10;    val total = cartItems.sumOf { it.product?.price ?: 0 * it.quantity }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF121212))&#10;            .padding(16.dp),&#10;    ) {&#10;        // Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBack) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = Color.White)&#10;            }&#10;            Text(&#10;                text = &quot;Giỏ hàng&quot;,&#10;                fontSize = 22.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFFD1AFFF)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (state.isLoading) {&#10;            // Hiện loading nếu cần&#10;            CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally), color = Color(0xFFBA68C8))&#10;        } else if (state.error != null) {&#10;            Text(&#10;                text = state.error ?: &quot;Lỗi không xác định&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;        } else if (cartItems.isEmpty()) {&#10;            Text(&#10;                text = &quot;Giỏ hàng trống&quot;,&#10;                color = Color.LightGray,&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;        } else {&#10;            // List giỏ hàng&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(cartItems) { item -&gt;&#10;                    CartItemComposable(&#10;                        cartItem = item,&#10;                        onIncrease = { onIncrease(item) },&#10;                        onDecrease = { onDecrease(item) },&#10;                        onRemove = { onRemove(item) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Tổng tiền + Checkout&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Tổng: $total đ&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Button(&#10;                    onClick = {&#10;                        showCheckoutDialog = true&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBA68C8)),&#10;                    modifier = Modifier&#10;                        .height(48.dp)&#10;                        .width(160.dp)&#10;                ) {&#10;                    Text(text = &quot;Thanh toán&quot;, color = Color.White)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    var showCheckoutDialog by remember { mutableStateOf(false) }&#10;    var fullname by remember { mutableStateOf(&quot;&quot;) }&#10;    var address by remember { mutableStateOf(&quot;&quot;) }&#10;    var phone by remember { mutableStateOf(&quot;&quot;) }&#10;    var note by remember { mutableStateOf(&quot;&quot;) }&#10;    var type by remember { mutableStateOf(&quot;online&quot;) }&#10;    val context = LocalContext.current&#10;    val checkoutResult by cartViewModel.checkoutResult.observeAsState()&#10;&#10;    // Hiển thị thông báo khi thanh toán thành công/thất bại&#10;    LaunchedEffect(checkoutResult) {&#10;        checkoutResult?.let {&#10;            if (it.isSuccess) {&#10;                Toast.makeText(context, &quot;Thanh toán thành công!&quot;, Toast.LENGTH_LONG).show()&#10;                showCheckoutDialog = false&#10;                cartViewModel.loadCart(token)&#10;            } else {&#10;                Toast.makeText(context, &quot;Thanh toán thất bại!&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Dialog nhập thông tin thanh toán&#10;    if (showCheckoutDialog) {&#10;        androidx.compose.material3.AlertDialog(&#10;            onDismissRequest = { showCheckoutDialog = false },&#10;            title = { Text(&quot;Thông tin thanh toán&quot;) },&#10;            text = {&#10;                Column {&#10;                    androidx.compose.material3.OutlinedTextField(&#10;                        value = fullname,&#10;                        onValueChange = { fullname = it },&#10;                        label = { Text(&quot;Họ tên&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    androidx.compose.material3.OutlinedTextField(&#10;                        value = address,&#10;                        onValueChange = { address = it },&#10;                        label = { Text(&quot;Địa chỉ&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    androidx.compose.material3.OutlinedTextField(&#10;                        value = phone,&#10;                        onValueChange = { phone = it },&#10;                        label = { Text(&quot;Số điện thoại&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    androidx.compose.material3.OutlinedTextField(&#10;                        value = note,&#10;                        onValueChange = { note = it },&#10;                        label = { Text(&quot;Ghi chú&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    // Loại đơn hàng&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Text(&quot;Loại đơn hàng:&quot;, modifier = Modifier.padding(end = 8.dp))&#10;                        androidx.compose.material3.RadioButton(&#10;                            selected = type == &quot;online&quot;,&#10;                            onClick = { type = &quot;online&quot; }&#10;                        )&#10;                        Text(&quot;Online&quot;, modifier = Modifier.padding(end = 8.dp))&#10;                        androidx.compose.material3.RadioButton(&#10;                            selected = type == &quot;cod&quot;,&#10;                            onClick = { type = &quot;cod&quot; }&#10;                        )&#10;                        Text(&quot;COD&quot;)&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(onClick = {&#10;                    val body = mapOf(&#10;                        &quot;fullname&quot; to fullname,&#10;                        &quot;address&quot; to address,&#10;                        &quot;phone&quot; to phone,&#10;                        &quot;note&quot; to note,&#10;                        &quot;type&quot; to type&#10;                    )&#10;                    cartViewModel.checkoutOrder(token, body)&#10;                }) {&#10;                    Text(&quot;Xác nhận&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                Button(onClick = { showCheckoutDialog = false }) {&#10;                    Text(&quot;Hủy&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/ui/order/OrderDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/ui/order/OrderDetailScreen.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.ui.order&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.viewmodle.order.OrderViewModel&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@Composable&#10;fun OrderDetailScreen(&#10;    orderId: String,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    val backgroundColor = Color(0xFF121212)&#10;    val accentColor = Color(0xFFD1AFFF)&#10;    val surfaceColor = Color(0xFF1E1E1E)&#10;    val textColor = Color.White&#10;    val context = LocalContext.current&#10;    val tokenManager = TokenManager(context)&#10;    val token = kotlinx.coroutines.runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;    val orderViewModel: OrderViewModel = viewModel()&#10;    val order by orderViewModel.orderDetail.collectAsState()&#10;    val error by orderViewModel.orderDetailError.collectAsState()&#10;&#10;    LaunchedEffect(orderId) {&#10;        orderViewModel.fetchOrderDetail(token, orderId)&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(backgroundColor)&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        ) {&#10;            IconButton(onClick = onBack) {&#10;                Icon(&#10;                    Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = accentColor&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Chi tiết đơn hàng&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = textColor&#10;            )&#10;        }&#10;        if (error != null) {&#10;            Text(text = error ?: &quot;Lỗi không xác định&quot;, color = Color.Red)&#10;        } else if (order == null) {&#10;            Text(text = &quot;Đang tải...&quot;, color = Color.LightGray)&#10;        } else {&#10;            // Thông tin đơn hàng&#10;            Text(&quot; Mã đơn hàng: ${order!!._id}&quot;, color = textColor)&#10;            Text(&quot; Người nhận: ${order!!.fullname}&quot;, color = textColor)&#10;            Text(&quot; SĐT: ${order!!.phone!!}&quot;, color = textColor)&#10;            Text(&quot; Địa chỉ: ${order!!.address}&quot;, color = textColor)&#10;            Text(&quot; Ngày đặt: ${order!!.createdAt}&quot;, color = textColor)&#10;            Text(&quot; Loại đơn hàng: ${order!!.type}&quot;, color = accentColor)&#10;            if (!order!!.note.isNullOrBlank()) {&#10;                Text(&quot; Ghi chú: ${order!!.note}&quot;, color = accentColor)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&quot; Sản phẩm&quot;, style = MaterialTheme.typography.titleMedium, color = accentColor)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(order!!.items.size) { index -&gt;&#10;                    val item = order!!.items[index]&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                    ) {&#10;                        Column(modifier = Modifier.padding(16.dp)) {&#10;                            Text(text = item.product.name, color = textColor, style = MaterialTheme.typography.titleSmall)&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Text(&quot;Giá: ${item.product.price}đ&quot;, color = Color(0xFFBBBBBB))&#10;                            Text(&quot;Số lượng: ${item.quantity}&quot;, color = Color(0xFFBBBBBB))&#10;                            if (!item.product.description.isNullOrBlank()) {&#10;                                Text(&quot;Mô tả: ${item.product.description}&quot;, color = Color(0xFFBBBBBB))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot; Tổng tiền: ${order.totalPrice}đ&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = accentColor,&#10;                modifier = Modifier.align(Alignment.End)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OrderDetailItem(item: OrderItem) {&#10;    val surfaceColor = Color(0xFF1E1E1E)&#10;    val textColor = Color.White&#10;    val grayText = Color(0xFFBBBBBB)&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(text = item.name, color = textColor, style = MaterialTheme.typography.titleSmall)&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&quot;Giá: ${item.price.toInt()}đ&quot;, color = grayText)&#10;            Text(&quot;Số lượng: ${item.quantity}&quot;, color = grayText)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.ui.order&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.viewmodle.order.OrderViewModel&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@Composable&#10;fun OrderDetailScreen(&#10;    orderId: String,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    val backgroundColor = Color(0xFF121212)&#10;    val accentColor = Color(0xFFD1AFFF)&#10;    val surfaceColor = Color(0xFF1E1E1E)&#10;    val textColor = Color.White&#10;    val context = LocalContext.current&#10;    val tokenManager = TokenManager(context)&#10;    val token = kotlinx.coroutines.runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;    val orderViewModel: OrderViewModel = viewModel()&#10;    val order by orderViewModel.orderDetail.collectAsState()&#10;    val error by orderViewModel.orderDetailError.collectAsState()&#10;&#10;    LaunchedEffect(orderId) {&#10;        orderViewModel.fetchOrderDetail(token, orderId)&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(backgroundColor)&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        ) {&#10;            IconButton(onClick = onBack) {&#10;                Icon(&#10;                    Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = accentColor&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Chi tiết đơn hàng&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = textColor&#10;            )&#10;        }&#10;        if (error != null) {&#10;            Text(text = error ?: &quot;Lỗi không xác định&quot;, color = Color.Red)&#10;        } else if (order == null) {&#10;            Text(text = &quot;Đang tải...&quot;, color = Color.LightGray)&#10;        } else {&#10;            // Thông tin đơn hàng&#10;            Text(&quot; Mã đơn hàng: ${order!!._id}&quot;, color = textColor)&#10;            Text(&quot; Người nhận: ${order!!.fullname}&quot;, color = textColor)&#10;            Text(&quot; SĐT: ${order!!.phone!!}&quot;, color = textColor)&#10;            Text(&quot; Địa chỉ: ${order!!.address}&quot;, color = textColor)&#10;            Text(&quot; Ngày đặt: ${order!!.createdAt}&quot;, color = textColor)&#10;            Text(&quot; Loại đơn hàng: ${order!!.type}&quot;, color = accentColor)&#10;            if (!order!!.note.isNullOrBlank()) {&#10;                Text(&quot; Ghi chú: ${order!!.note}&quot;, color = accentColor)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&quot; Sản phẩm&quot;, style = MaterialTheme.typography.titleMedium, color = accentColor)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(order!!.items.size) { index -&gt;&#10;                    val item = order!!.items[index]&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                    ) {&#10;                        Column(modifier = Modifier.padding(16.dp)) {&#10;                            Text(text = item.product.name, color = textColor, style = MaterialTheme.typography.titleSmall)&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Text(&quot;Giá: ${item.product.price}đ&quot;, color = Color(0xFFBBBBBB))&#10;                            Text(&quot;Số lượng: ${item.quantity}&quot;, color = Color(0xFFBBBBBB))&#10;                            if (!item.product.description.isNullOrBlank()) {&#10;                                Text(&quot;Mô tả: ${item.product.description}&quot;, color = Color(0xFFBBBBBB))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot; Tổng tiền: ${order.totalPrice}đ&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = accentColor,&#10;                modifier = Modifier.align(Alignment.End)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/ui/order/OrderHistoryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/ui/order/OrderHistoryScreen.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.ui.order&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.viewmodle.order.OrderViewModel&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;&#10;@Composable&#10;fun OrderHistoryScreen(&#10;    onBack: () -&gt; Unit,&#10;    onOrderClick: (OrderModel) -&gt; Unit&#10;) {&#10;    val backgroundColor = Color(0xFF121212)&#10;    val textColor = Color.White&#10;    val accentColor = Color(0xFFD1AFFF)&#10;&#10;    val context = LocalContext.current&#10;    val tokenManager = TokenManager(context)&#10;    val token = kotlinx.coroutines.runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;    val orderViewModel: OrderViewModel = viewModel()&#10;    val orders by orderViewModel.orders.collectAsState()&#10;    val error by orderViewModel.error.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        orderViewModel.fetchOrders(token)&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(backgroundColor)&#10;            .padding(16.dp)&#10;    ) {&#10;        // Custom App Bar&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        ) {&#10;            IconButton(onClick = onBack) {&#10;                Icon(&#10;                    Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = accentColor&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Lịch sử đơn hàng&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = textColor&#10;            )&#10;        }&#10;&#10;        if (error != null) {&#10;            Text(text = error ?: &quot;Lỗi không xác định&quot;, color = Color.Red)&#10;        } else if (orders.isEmpty()) {&#10;            Text(text = &quot;Không có đơn hàng nào&quot;, color = Color.LightGray)&#10;        } else {&#10;            LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                items(orders) { order -&gt;&#10;                    OrderCard(order, onClick = { onOrderClick(order) }, textColor, accentColor)&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OrderCard(&#10;    order: OrderModel,&#10;    onClick: () -&gt; Unit,&#10;    textColor: Color,&#10;    accentColor: Color&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick),&#10;        shape = MaterialTheme.shapes.medium,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Color(0xFF1E1E1E)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(6.dp)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;Ngày: ${order.createdAt}&quot;, style = MaterialTheme.typography.titleSmall, color = textColor)&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            order.items.forEach {&#10;                Text(&#10;                    &quot;- ${it.product} x${it.quantity}&quot;,&#10;                    color = textColor&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                &quot;Tổng: ${order.totalPrice}đ&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = accentColor&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.ui.order&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.kot1041_asm.src.model.order.OrderListModel&#10;import com.example.kot1041_asm.src.viewmodle.order.OrderViewModel&#10;import com.example.kot1041_asm.src.DataStore.auth.TokenManager&#10;&#10;@Composable&#10;fun OrderHistoryScreen(&#10;    onBack: () -&gt; Unit,&#10;    onOrderClick: (OrderListModel) -&gt; Unit&#10;) {&#10;    val backgroundColor = Color(0xFF121212)&#10;    val textColor = Color.White&#10;    val accentColor = Color(0xFFD1AFFF)&#10;&#10;    val context = LocalContext.current&#10;    val tokenManager = TokenManager(context)&#10;    val token = kotlinx.coroutines.runBlocking { tokenManager.getToken() ?: &quot;&quot; }&#10;    val orderViewModel: OrderViewModel = viewModel()&#10;    val orders by orderViewModel.orders.collectAsState()&#10;    val error by orderViewModel.error.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        orderViewModel.fetchOrders(token)&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(backgroundColor)&#10;            .padding(16.dp)&#10;    ) {&#10;        // Custom App Bar&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        ) {&#10;            IconButton(onClick = onBack) {&#10;                Icon(&#10;                    Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = accentColor&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Lịch sử đơn hàng&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = textColor&#10;            )&#10;        }&#10;&#10;        if (error != null) {&#10;            Text(text = error ?: &quot;Lỗi không xác định&quot;, color = Color.Red)&#10;        } else if (orders.isEmpty()) {&#10;            Text(text = &quot;Không có đơn hàng nào&quot;, color = Color.LightGray)&#10;        } else {&#10;            LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                items(orders) { order -&gt;&#10;                    OrderCard(order, onClick = { onOrderClick(order) }, textColor, accentColor)&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OrderCard(&#10;    order: OrderListModel,&#10;    onClick: () -&gt; Unit,&#10;    textColor: Color,&#10;    accentColor: Color&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick),&#10;        shape = MaterialTheme.shapes.medium,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Color(0xFF1E1E1E)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(6.dp)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&quot;Ngày: ${order.createdAt}&quot;, style = MaterialTheme.typography.titleSmall, color = textColor)&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            order.items.forEach {&#10;                Text(&#10;                    &quot;- ${it.product} x${it.quantity}&quot;,&#10;                    color = textColor&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                &quot;Tổng: ${order.totalPrice}đ&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = accentColor&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/viewmodle/cart/CartViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/viewmodle/cart/CartViewModel.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.viewmodle.cart&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.kot1041_asm.src.config.RetrofitClient&#10;import com.example.kot1041_asm.src.model.cart.CartData&#10;import com.example.kot1041_asm.src.model.cart.CartResponseCart&#10;import com.example.kot1041_asm.src.repository.cart.CartRepository&#10;import com.example.kot1041_asm.src.repository.home.HomeRepository&#10;import com.example.kot1041_asm.src.services.cart.CartService&#10;import com.example.kot1041_asm.src.services.home.HomeService&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import retrofit2.Response&#10;&#10;data class CartState(&#10;    val isLoading: Boolean = false,&#10;    val cartData: CartData? = null,&#10;    val error: String? = null&#10;)&#10;&#10;class CartViewModel() : ViewModel() {&#10;    private val repository = CartRepository(RetrofitClient.instance.create(CartService::class.java))&#10;&#10;    private val _state = MutableStateFlow(CartState())&#10;    val state = _state.asStateFlow()&#10;    private val _updateCartResult = MutableLiveData&lt;Result&lt;CartResponseCart&gt;&gt;()&#10;    val updateCartResult: LiveData&lt;Result&lt;CartResponseCart&gt;&gt; = _updateCartResult&#10;&#10;&#10;    fun loadCart(token: String) {&#10;        viewModelScope.launch {&#10;            _state.value = CartState(isLoading = true)&#10;            try {&#10;                val response: Response&lt;CartResponseCart&gt; = repository.getCart(token)&#10;                if (response.isSuccessful) {&#10;                    _state.value = CartState(&#10;                        isLoading = false,&#10;                        cartData = response.body()?.data&#10;                    )&#10;                } else {&#10;                    _state.value = CartState(&#10;                        isLoading = false,&#10;                        error = &quot;Lỗi tải giỏ hàng: ${response.code()}&quot;&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _state.value = CartState(&#10;                    isLoading = false,&#10;                    error = e.localizedMessage ?: &quot;Lỗi không xác định&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;    fun updateCartItem(token: String, productId: String, quantity: Int) {&#10;        viewModelScope.launch {&#10;            val result = repository.updateCartItem(token, productId, quantity)&#10;            _updateCartResult.postValue(result)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.viewmodle.cart&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.kot1041_asm.src.config.RetrofitClient&#10;import com.example.kot1041_asm.src.model.cart.CartData&#10;import com.example.kot1041_asm.src.model.cart.CartResponseCart&#10;import com.example.kot1041_asm.src.repository.cart.CartRepository&#10;import com.example.kot1041_asm.src.repository.home.HomeRepository&#10;import com.example.kot1041_asm.src.services.cart.CartService&#10;import com.example.kot1041_asm.src.services.home.HomeService&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import retrofit2.Response&#10;&#10;data class CartState(&#10;    val isLoading: Boolean = false,&#10;    val cartData: CartData? = null,&#10;    val error: String? = null&#10;)&#10;&#10;class CartViewModel() : ViewModel() {&#10;    private val repository = CartRepository(RetrofitClient.instance.create(CartService::class.java))&#10;&#10;    private val _state = MutableStateFlow(CartState())&#10;    val state = _state.asStateFlow()&#10;    private val _updateCartResult = MutableLiveData&lt;Result&lt;CartResponseCart&gt;&gt;()&#10;    val updateCartResult: LiveData&lt;Result&lt;CartResponseCart&gt;&gt; = _updateCartResult&#10;    private val _checkoutResult = MutableLiveData&lt;Result&lt;Any&gt;&gt;()&#10;    val checkoutResult: LiveData&lt;Result&lt;Any&gt;&gt; = _checkoutResult&#10;&#10;    fun loadCart(token: String) {&#10;        viewModelScope.launch {&#10;            _state.value = CartState(isLoading = true)&#10;            try {&#10;                val response: Response&lt;CartResponseCart&gt; = repository.getCart(token)&#10;                if (response.isSuccessful) {&#10;                    _state.value = CartState(&#10;                        isLoading = false,&#10;                        cartData = response.body()?.data&#10;                    )&#10;                } else {&#10;                    _state.value = CartState(&#10;                        isLoading = false,&#10;                        error = &quot;Lỗi tải giỏ hàng: ${response.code()}&quot;&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _state.value = CartState(&#10;                    isLoading = false,&#10;                    error = e.localizedMessage ?: &quot;Lỗi không xác định&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;    fun updateCartItem(token: String, productId: String, quantity: Int) {&#10;        viewModelScope.launch {&#10;            val result = repository.updateCartItem(token, productId, quantity)&#10;            _updateCartResult.postValue(result)&#10;        }&#10;    }&#10;&#10;    fun checkoutOrder(token: String, body: Map&lt;String, String&gt;) {&#10;        viewModelScope.launch {&#10;            val result = repository.checkoutOrder(token, body)&#10;            _checkoutResult.postValue(result)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/viewmodle/order/OrderViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kot1041_asm/src/viewmodle/order/OrderViewModel.kt" />
              <option name="originalContent" value="package com.example.kot1041_asm.src.viewmodle.order&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.services.order.OrderService&#10;import com.example.kot1041_asm.src.repository.order.OrderRepository&#10;import com.example.kot1041_asm.src.config.RetrofitClient&#10;&#10;class OrderViewModel : ViewModel() {&#10;    private val orderService = RetrofitClient.instance.create(OrderService::class.java)&#10;    private val repository = OrderRepository(orderService)&#10;&#10;    private val _orders = MutableStateFlow&lt;List&lt;OrderModel&gt;&gt;(emptyList())&#10;    val orders: StateFlow&lt;List&lt;OrderModel&gt;&gt; = _orders&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error&#10;&#10;    private val _orderDetail = MutableStateFlow&lt;OrderModel?&gt;(null)&#10;    val orderDetail: StateFlow&lt;OrderModel?&gt; = _orderDetail&#10;    private val _orderDetailError = MutableStateFlow&lt;String?&gt;(null)&#10;    val orderDetailError: StateFlow&lt;String?&gt; = _orderDetailError&#10;&#10;    fun fetchOrders(token: String) {&#10;        viewModelScope.launch {&#10;            val result = repository.getAllOrders(token)&#10;            if (result.isSuccess) {&#10;                _orders.value = result.getOrDefault(emptyList())&#10;                _error.value = null&#10;            } else {&#10;                _orders.value = emptyList()&#10;                _error.value = result.exceptionOrNull()?.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchOrderDetail(token: String, orderId: String) {&#10;        viewModelScope.launch {&#10;            val result = repository.getOrderDetail(token, orderId)&#10;            if (result.isSuccess) {&#10;                _orderDetail.value = result.getOrNull()&#10;                _orderDetailError.value = null&#10;            } else {&#10;                _orderDetail.value = null&#10;                _orderDetailError.value = result.exceptionOrNull()?.message&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kot1041_asm.src.viewmodle.order&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.kot1041_asm.src.model.order.OrderModel&#10;import com.example.kot1041_asm.src.model.order.OrderListModel&#10;import com.example.kot1041_asm.src.model.order.OrderDetailModel&#10;import com.example.kot1041_asm.src.services.order.OrderService&#10;import com.example.kot1041_asm.src.repository.order.OrderRepository&#10;import com.example.kot1041_asm.src.config.RetrofitClient&#10;&#10;class OrderViewModel : ViewModel() {&#10;    private val orderService = RetrofitClient.instance.create(OrderService::class.java)&#10;    private val repository = OrderRepository(orderService)&#10;&#10;    private val _orders = MutableStateFlow&lt;List&lt;OrderListModel&gt;&gt;(emptyList())&#10;    val orders: StateFlow&lt;List&lt;OrderListModel&gt;&gt; = _orders&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error&#10;&#10;    private val _orderDetail = MutableStateFlow&lt;OrderDetailModel?&gt;(null)&#10;    val orderDetail: StateFlow&lt;OrderDetailModel?&gt; = _orderDetail&#10;    private val _orderDetailError = MutableStateFlow&lt;String?&gt;(null)&#10;    val orderDetailError: StateFlow&lt;String?&gt; = _orderDetailError&#10;&#10;    fun fetchOrders(token: String) {&#10;        viewModelScope.launch {&#10;            val result = repository.getAllOrders(token)&#10;            if (result.isSuccess) {&#10;                _orders.value = result.getOrDefault(emptyList())&#10;                _error.value = null&#10;            } else {&#10;                _orders.value = emptyList()&#10;                _error.value = result.exceptionOrNull()?.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchOrderDetail(token: String, orderId: String) {&#10;        viewModelScope.launch {&#10;            val result = repository.getOrderDetail(token, orderId)&#10;            if (result.isSuccess) {&#10;                _orderDetail.value = result.getOrNull()&#10;                _orderDetailError.value = null&#10;            } else {&#10;                _orderDetail.value = null&#10;                _orderDetailError.value = result.exceptionOrNull()?.message&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>